#!/usr/bin/env python3
"""
Test AssertLang v0.1.5 Bug Fixes

Tests for critical bugs fixed in v0.1.5:
1. Missing runtime infrastructure in Python transpilation (BUG #1)
2. JavaScript/TypeScript transpilation failure with IRPropertyAccess (BUG #2)
3. Incorrect list.length() code generation in Python (BUG #3)
4. Module naming conflicts (BUG #4)
5. Runtime library package (BUG #5)
6. Version headers in generated files (ISSUE #8)
"""

import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from dsl.al_parser import parse_al
from language.javascript_generator import JavaScriptGenerator
from language.python_generator_v2 import PythonGeneratorV2


def test_python_runtime_imports():
    """
    BUG #1 & #5: Python transpilation should include runtime imports.

    BEFORE (v0.1.4):
        # No imports
        def greet(name: str) -> Result:  # NameError: Result not defined
            return Ok("Hello")  # NameError: Ok not defined

    AFTER (v0.1.5):
        from assertlang.runtime import Ok, Error, Result

        def greet(name: str) -> Result:  # ‚úÖ Works!
            return Ok("Hello")
    """
    al_code = """
function greet(name: string) -> Result {
    return Ok("Hello, " + name);
}
"""

    ir_module = parse_al(al_code)
    generator = PythonGeneratorV2()
    py_code = generator.generate(ir_module)

    print("=" * 80)
    print("TEST #1: Python Runtime Imports")
    print("=" * 80)

    # Check #1: Should have runtime imports
    if "from assertlang.runtime import Ok, Error, Result" in py_code:
        print("‚úÖ PASS: Runtime imports are present")
    else:
        print("‚ùå FAIL: Missing runtime imports")
        print(py_code)
        return False

    # Check #2: Should have version header
    if "# Generated by AssertLang v" in py_code:
        print("‚úÖ PASS: Version header is present")
    else:
        print("‚ùå FAIL: Missing version header")
        return False

    # Check #3: Should use Ok() and Result correctly
    if "return Ok(" in py_code:
        print("‚úÖ PASS: Uses Ok() function")
    else:
        print("‚ùå FAIL: Ok() function not found")
        return False

    print("\nüìù Generated Python:")
    print("-" * 80)
    print(py_code)
    print("-" * 80)

    return True


def test_list_length_fix():
    """
    BUG #3: list.length(x) should generate len(x), not len(list)(x).

    BEFORE (v0.1.4):
        return len(list)(items)  # TypeError: 'type' object is not callable

    AFTER (v0.1.5):
        return len(items)  # ‚úÖ Works!
    """
    al_code = """
function count_items(items: list) -> int {
    return list.length(items);
}

function check_empty(items: list) -> Result {
    if (list.length(items) == 0) {
        return Error("Empty list");
    }
    return Ok("Has items");
}
"""

    ir_module = parse_al(al_code)
    generator = PythonGeneratorV2()
    py_code = generator.generate(ir_module)

    print("\n" + "=" * 80)
    print("TEST #2: list.length() Code Generation")
    print("=" * 80)

    # Check #1: Should NOT have len(list)(
    if "len(list)(" in py_code:
        print("‚ùå FAIL: Found incorrect len(list)( pattern")
        print(py_code)
        return False

    # Check #2: Should have len(items)
    if "len(items)" in py_code:
        print("‚úÖ PASS: Uses len(items) correctly")
    else:
        print("‚ùå FAIL: len(items) not found")
        return False

    print("\nüìù Generated Python:")
    print("-" * 80)
    print(py_code)
    print("-" * 80)

    return True


def test_javascript_property_access():
    """
    BUG #2: JavaScript transpilation should handle IRPropertyAccess without errors.

    BEFORE (v0.1.4):
        Build failed: unhashable type: 'IRPropertyAccess'

    AFTER (v0.1.5):
        Successfully generates JavaScript with property access
    """
    al_code = """
class Person {
    function __init__(name: string, age: int) {
        self.name = name;
        self.age = age;
    }

    function greet() -> string {
        return "Hello, I'm " + self.name;
    }

    function get_age() -> int {
        return self.age;
    }
}
"""

    print("\n" + "=" * 80)
    print("TEST #3: JavaScript Property Access (IRPropertyAccess)")
    print("=" * 80)

    try:
        ir_module = parse_al(al_code)
        generator = JavaScriptGenerator()
        js_code = generator.generate(ir_module)

        print("‚úÖ PASS: JavaScript generation succeeded (no crash)")

        # Check #1: Should have this.name property access
        if "this.name" in js_code:
            print("‚úÖ PASS: Property access uses 'this.name'")
        else:
            print("‚ùå FAIL: Missing 'this.name'")
            return False

        # Check #2: Should have constructor
        if "constructor(" in js_code:
            print("‚úÖ PASS: Has constructor")
        else:
            print("‚ùå FAIL: Missing constructor")
            return False

        # Check #3: Should have version header
        if "// Generated by AssertLang v" in js_code:
            print("‚úÖ PASS: Version header is present")
        else:
            print("‚ùå FAIL: Missing version header")
            return False

        print("\nüìù Generated JavaScript:")
        print("-" * 80)
        print(js_code)
        print("-" * 80)

        return True

    except Exception as e:
        print(f"‚ùå FAIL: JavaScript generation crashed with error: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_version_headers():
    """
    ISSUE #8: Generated files should include version headers.
    """
    al_code = """
function hello() -> string {
    return "Hello, World!";
}
"""

    print("\n" + "=" * 80)
    print("TEST #4: Version Headers in Generated Files")
    print("=" * 80)

    # Test Python generator
    ir_module = parse_al(al_code)
    py_gen = PythonGeneratorV2()
    py_code = py_gen.generate(ir_module)

    py_has_version = "# Generated by AssertLang v" in py_code
    py_has_source = "# Source:" in py_code
    py_has_warning = "# DO NOT EDIT" in py_code

    if py_has_version and py_has_source and py_has_warning:
        print("‚úÖ PASS: Python generator has complete version header")
    else:
        print(f"‚ùå FAIL: Python generator missing headers (version={py_has_version}, source={py_has_source}, warning={py_has_warning})")
        return False

    # Test JavaScript generator
    js_gen = JavaScriptGenerator()
    js_code = js_gen.generate(ir_module)

    js_has_version = "// Generated by AssertLang v" in js_code
    js_has_source = "// Source:" in js_code
    js_has_warning = "// DO NOT EDIT" in js_code

    if js_has_version and js_has_source and js_has_warning:
        print("‚úÖ PASS: JavaScript generator has complete version header")
    else:
        print(f"‚ùå FAIL: JavaScript generator missing headers (version={js_has_version}, source={js_has_source}, warning={js_has_warning})")
        return False

    return True


def test_runtime_package_import():
    """
    BUG #5: Test that runtime package can be imported and used.
    """
    print("\n" + "=" * 80)
    print("TEST #5: Runtime Package Import")
    print("=" * 80)

    try:
        from assertlang.runtime import Ok, Error, Result, al_str, al_list, al_math, al_result

        print("‚úÖ PASS: Runtime package imports successfully")

        # Test Ok/Error functions
        result_ok = Ok("success")
        result_err = Error("failure")

        if result_ok.is_ok() and result_err.is_error():
            print("‚úÖ PASS: Ok/Error functions work correctly")
        else:
            print("‚ùå FAIL: Ok/Error functions don't work")
            return False

        # Test str module doesn't break built-in str()
        if callable(al_str):
            test_str = al_str(123)
            if test_str == "123":
                print("‚úÖ PASS: al_str() preserves built-in str() behavior")
            else:
                print("‚ùå FAIL: al_str() doesn't work as built-in")
                return False
        else:
            print("‚ùå FAIL: al_str is not callable")
            return False

        # Test str.length()
        length = al_str.length("hello")
        if length == 5:
            print("‚úÖ PASS: al_str.length() works")
        else:
            print(f"‚ùå FAIL: al_str.length() returned {length}, expected 5")
            return False

        # Test list module
        test_list = [1, 2, 3]
        list_len = al_list.length(test_list)
        if list_len == 3:
            print("‚úÖ PASS: al_list.length() works")
        else:
            print(f"‚ùå FAIL: al_list.length() returned {list_len}, expected 3")
            return False

        # Test math module
        if al_math.floor(3.7) == 3:
            print("‚úÖ PASS: al_math.floor() works")
        else:
            print("‚ùå FAIL: al_math.floor() doesn't work")
            return False

        return True

    except ImportError as e:
        print(f"‚ùå FAIL: Cannot import runtime package: {e}")
        return False
    except Exception as e:
        print(f"‚ùå FAIL: Runtime package error: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("‚ñà" * 80)
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + "        AssertLang v0.1.5 - Critical Bug Fixes Test Suite".center(78) + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" * 80)

    all_passed = True

    # Run tests
    if not test_python_runtime_imports():
        all_passed = False

    if not test_list_length_fix():
        all_passed = False

    if not test_javascript_property_access():
        all_passed = False

    if not test_version_headers():
        all_passed = False

    if not test_runtime_package_import():
        all_passed = False

    # Final result
    print("\n" + "=" * 80)
    print("FINAL RESULTS")
    print("=" * 80)

    if all_passed:
        print("‚úÖ‚úÖ‚úÖ ALL TESTS PASSED ‚úÖ‚úÖ‚úÖ")
        print("\nv0.1.5 fixes are working correctly!")
        print("\nFixed:")
        print("  1. ‚úÖ Missing runtime infrastructure in Python (BUG #1 - P0 CRITICAL)")
        print("  2. ‚úÖ JavaScript/TypeScript transpilation failure (BUG #2 - P0 CRITICAL)")
        print("  3. ‚úÖ Incorrect list.length() code generation (BUG #3 - P0 CRITICAL)")
        print("  4. ‚úÖ Module naming conflicts (BUG #4 - P1 MAJOR)")
        print("  5. ‚úÖ Runtime library package (BUG #5 - P1 MAJOR)")
        print("  6. ‚úÖ Version headers (ISSUE #8 - P3 MINOR)")
        print("\nReady for release!")
        exit(0)
    else:
        print("‚ùå‚ùå‚ùå SOME TESTS FAILED ‚ùå‚ùå‚ùå")
        exit(1)
