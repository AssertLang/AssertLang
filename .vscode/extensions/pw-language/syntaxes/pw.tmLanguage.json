{
  "name": "PW",
  "scopeName": "source.al",
  "fileTypes": ["pw"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#types" },
    { "include": "#functions" },
    { "include": "#operators" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.al",
          "match": "//.*$"
        },
        {
          "name": "comment.block.al",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.al",
          "match": "\\b(if|else|for|while|return|break|continue|switch|case|default|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.other.al",
          "match": "\\b(function|class|type|enum|let|const|import|from|export|async|await)\\b"
        },
        {
          "name": "storage.modifier.al",
          "match": "\\b(public|private|static)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.al",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.al",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.al",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.al",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.al",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.al",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.language.boolean.al",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.al",
          "match": "\\bnull\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.al",
          "match": "\\b(int|float|string|bool|void|any)\\b"
        },
        {
          "name": "support.type.collection.al",
          "match": "\\b(array|map|set)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.al",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        },
        {
          "name": "meta.function.al",
          "begin": "\\b(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.other.al" },
            "2": { "name": "entity.name.function.al" }
          },
          "end": "(?<=\\})",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.al",
          "match": "\\+|\\-|\\*|\\/|\\%"
        },
        {
          "name": "keyword.operator.comparison.al",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.al",
          "match": "\\b(and|or|not)\\b|&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.al",
          "match": "=|\\+=|\\-=|\\*=|\\/="
        },
        {
          "name": "keyword.operator.arrow.al",
          "match": "->"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.al",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
