[
  {
    "pw_code": "let content = file.read(\"data.txt\")",
    "operation_id": "file.read",
    "context": "assignment"
  },
  {
    "pw_code": "let config = file.read(\"/etc/config.json\")",
    "operation_id": "file.read",
    "context": "assignment"
  },
  {
    "pw_code": "if file.read(\"status.txt\").is_empty()",
    "operation_id": "file.read",
    "context": "conditional"
  },
  {
    "pw_code": "let lines = file.read(path).split(\"\\n\")",
    "operation_id": "file.read",
    "context": "chained"
  },
  {
    "pw_code": "for line in file.read(\"input.csv\").split(\"\\n\")",
    "operation_id": "file.read",
    "context": "loop"
  },
  {
    "pw_code": "return file.read(filepath)",
    "operation_id": "file.read",
    "context": "return"
  },
  {
    "pw_code": "file.write(\"output.txt\", result)",
    "operation_id": "file.write",
    "context": "statement"
  },
  {
    "pw_code": "file.write(path, json.stringify(data))",
    "operation_id": "file.write",
    "context": "chained"
  },
  {
    "pw_code": "file.write(\"log.txt\", timestamp + \": \" + message)",
    "operation_id": "file.write",
    "context": "concatenation"
  },
  {
    "pw_code": "if success { file.write(\"done.txt\", \"Complete\") }",
    "operation_id": "file.write",
    "context": "conditional"
  },
  {
    "pw_code": "file.write(output_path, content)",
    "operation_id": "file.write",
    "context": "variables"
  },
  {
    "pw_code": "if file.exists(\"config.json\")",
    "operation_id": "file.exists",
    "context": "conditional"
  },
  {
    "pw_code": "let has_file = file.exists(path)",
    "operation_id": "file.exists",
    "context": "assignment"
  },
  {
    "pw_code": "if not file.exists(\"data.txt\")",
    "operation_id": "file.exists",
    "context": "negation"
  },
  {
    "pw_code": "while not file.exists(lockfile)",
    "operation_id": "file.exists",
    "context": "loop"
  },
  {
    "pw_code": "return file.exists(filename)",
    "operation_id": "file.exists",
    "context": "return"
  },
  {
    "pw_code": "file.delete(\"temp.txt\")",
    "operation_id": "file.delete",
    "context": "statement"
  },
  {
    "pw_code": "if file.exists(path) { file.delete(path) }",
    "operation_id": "file.delete",
    "context": "conditional"
  },
  {
    "pw_code": "file.delete(tmpfile)",
    "operation_id": "file.delete",
    "context": "variable"
  },
  {
    "pw_code": "for f in old_files { file.delete(f) }",
    "operation_id": "file.delete",
    "context": "loop"
  },
  {
    "pw_code": "let files = file.list_dir(\".\")",
    "operation_id": "file.list_dir",
    "context": "assignment"
  },
  {
    "pw_code": "for file in file.list_dir(\"/tmp\")",
    "operation_id": "file.list_dir",
    "context": "loop"
  },
  {
    "pw_code": "let count = len(file.list_dir(directory))",
    "operation_id": "file.list_dir",
    "context": "chained"
  },
  {
    "pw_code": "if len(file.list_dir(path)) > 0",
    "operation_id": "file.list_dir",
    "context": "conditional"
  },
  {
    "pw_code": "file.mkdir(\"output\")",
    "operation_id": "file.mkdir",
    "context": "statement"
  },
  {
    "pw_code": "file.mkdir(output_dir)",
    "operation_id": "file.mkdir",
    "context": "variable"
  },
  {
    "pw_code": "if not file.exists(dir) { file.mkdir(dir) }",
    "operation_id": "file.mkdir",
    "context": "conditional"
  },
  {
    "pw_code": "file.copy(\"input.txt\", \"output.txt\")",
    "operation_id": "file.copy",
    "context": "statement"
  },
  {
    "pw_code": "file.copy(source, destination)",
    "operation_id": "file.copy",
    "context": "variables"
  },
  {
    "pw_code": "for src in sources { file.copy(src, dest) }",
    "operation_id": "file.copy",
    "context": "loop"
  },
  {
    "pw_code": "let parts = str.split(text, \",\")",
    "operation_id": "str.split",
    "context": "assignment"
  },
  {
    "pw_code": "let words = str.split(sentence, \" \")",
    "operation_id": "str.split",
    "context": "assignment"
  },
  {
    "pw_code": "for item in str.split(data, \",\")",
    "operation_id": "str.split",
    "context": "loop"
  },
  {
    "pw_code": "let count = len(str.split(csv_line, \",\"))",
    "operation_id": "str.split",
    "context": "chained"
  },
  {
    "pw_code": "if len(str.split(line, \"\\t\")) == 3",
    "operation_id": "str.split",
    "context": "conditional"
  },
  {
    "pw_code": "let upper = str.upper(text)",
    "operation_id": "str.upper",
    "context": "assignment"
  },
  {
    "pw_code": "let name_caps = str.upper(name)",
    "operation_id": "str.upper",
    "context": "assignment"
  },
  {
    "pw_code": "if str.upper(input) == \"YES\"",
    "operation_id": "str.upper",
    "context": "conditional"
  },
  {
    "pw_code": "return str.upper(result)",
    "operation_id": "str.upper",
    "context": "return"
  },
  {
    "pw_code": "print(str.upper(message))",
    "operation_id": "str.upper",
    "context": "function_call"
  },
  {
    "pw_code": "let lower = str.lower(text)",
    "operation_id": "str.lower",
    "context": "assignment"
  },
  {
    "pw_code": "if str.lower(answer) == \"yes\"",
    "operation_id": "str.lower",
    "context": "conditional"
  },
  {
    "pw_code": "let email = str.lower(user_email)",
    "operation_id": "str.lower",
    "context": "assignment"
  },
  {
    "pw_code": "let clean = str.trim(input)",
    "operation_id": "str.trim",
    "context": "assignment"
  },
  {
    "pw_code": "let username = str.trim(raw_input)",
    "operation_id": "str.trim",
    "context": "assignment"
  },
  {
    "pw_code": "if str.trim(line).is_empty()",
    "operation_id": "str.trim",
    "context": "conditional"
  },
  {
    "pw_code": "if \"error\" in log_line",
    "operation_id": "str.contains",
    "context": "conditional"
  },
  {
    "pw_code": "let has_pattern = \"@\" in email",
    "operation_id": "str.contains",
    "context": "assignment"
  },
  {
    "pw_code": "if \"WARNING\" in message",
    "operation_id": "str.contains",
    "context": "conditional"
  },
  {
    "pw_code": "if str.starts_with(filename, \"test_\")",
    "operation_id": "str.starts_with",
    "context": "conditional"
  },
  {
    "pw_code": "let is_comment = str.starts_with(line, \"#\")",
    "operation_id": "str.starts_with",
    "context": "assignment"
  },
  {
    "pw_code": "if str.starts_with(path, \"/\")",
    "operation_id": "str.starts_with",
    "context": "conditional"
  },
  {
    "pw_code": "let fixed = str.replace(text, \"old\", \"new\")",
    "operation_id": "str.replace",
    "context": "assignment"
  },
  {
    "pw_code": "let clean_path = str.replace(path, \"\\\\\", \"/\")",
    "operation_id": "str.replace",
    "context": "assignment"
  },
  {
    "pw_code": "return str.replace(content, search, replace)",
    "operation_id": "str.replace",
    "context": "return"
  },
  {
    "pw_code": "let data = json.parse(json_string)",
    "operation_id": "json.parse",
    "context": "assignment"
  },
  {
    "pw_code": "let config = json.parse(file.read(\"config.json\"))",
    "operation_id": "json.parse",
    "context": "chained"
  },
  {
    "pw_code": "let user = json.parse(response)",
    "operation_id": "json.parse",
    "context": "assignment"
  },
  {
    "pw_code": "for item in json.parse(json_text)",
    "operation_id": "json.parse",
    "context": "loop"
  },
  {
    "pw_code": "if json.parse(data)[\"status\"] == \"ok\"",
    "operation_id": "json.parse",
    "context": "conditional"
  },
  {
    "pw_code": "let json_str = json.stringify(data)",
    "operation_id": "json.stringify",
    "context": "assignment"
  },
  {
    "pw_code": "file.write(\"output.json\", json.stringify(result))",
    "operation_id": "json.stringify",
    "context": "chained"
  },
  {
    "pw_code": "return json.stringify(response)",
    "operation_id": "json.stringify",
    "context": "return"
  },
  {
    "pw_code": "print(json.stringify(user))",
    "operation_id": "json.stringify",
    "context": "function_call"
  },
  {
    "pw_code": "let response = http.get(\"https://api.example.com/data\")",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "let html = http.get(url)",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "let content = http.get(\"https://example.com\")",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "if \"200\" in http.get(health_url)",
    "operation_id": "http.get",
    "context": "conditional"
  },
  {
    "pw_code": "let data = http.get_json(\"https://api.example.com/users\")",
    "operation_id": "http.get_json",
    "context": "assignment"
  },
  {
    "pw_code": "let users = http.get_json(api_url)",
    "operation_id": "http.get_json",
    "context": "assignment"
  },
  {
    "pw_code": "for user in http.get_json(users_endpoint)",
    "operation_id": "http.get_json",
    "context": "loop"
  },
  {
    "pw_code": "let smaller = min(a, b)",
    "operation_id": "math.min",
    "context": "assignment"
  },
  {
    "pw_code": "let larger = max(x, y)",
    "operation_id": "math.max",
    "context": "assignment"
  },
  {
    "pw_code": "let result = min(count, limit)",
    "operation_id": "math.min",
    "context": "assignment"
  },
  {
    "pw_code": "let rounded = round(value)",
    "operation_id": "math.round",
    "context": "assignment"
  },
  {
    "pw_code": "let floored = floor(number)",
    "operation_id": "math.floor",
    "context": "assignment"
  },
  {
    "pw_code": "let ceiled = ceil(price)",
    "operation_id": "math.ceil",
    "context": "assignment"
  },
  {
    "pw_code": "let r = random()",
    "operation_id": "math.random",
    "context": "assignment"
  },
  {
    "pw_code": "let dice = random_int(1, 6)",
    "operation_id": "math.random_int",
    "context": "assignment"
  },
  {
    "pw_code": "if random() > 0.5",
    "operation_id": "math.random",
    "context": "conditional"
  },
  {
    "pw_code": "let count = len(items)",
    "operation_id": "array.len",
    "context": "assignment"
  },
  {
    "pw_code": "if len(array) > 0",
    "operation_id": "array.len",
    "context": "conditional"
  },
  {
    "pw_code": "for i in range(0, len(data))",
    "operation_id": "array.len",
    "context": "loop"
  },
  {
    "pw_code": "items.push(new_item)",
    "operation_id": "array.push",
    "context": "statement"
  },
  {
    "pw_code": "let last = items.pop()",
    "operation_id": "array.pop",
    "context": "assignment"
  },
  {
    "pw_code": "results.push(result)",
    "operation_id": "array.push",
    "context": "statement"
  },
  {
    "pw_code": "let timestamp = time.now()",
    "operation_id": "time.now",
    "context": "assignment"
  },
  {
    "pw_code": "let ms = time.now_ms()",
    "operation_id": "time.now_ms",
    "context": "assignment"
  },
  {
    "pw_code": "sleep(1)",
    "operation_id": "time.sleep",
    "context": "statement"
  },
  {
    "pw_code": "sleep_ms(500)",
    "operation_id": "time.sleep_ms",
    "context": "statement"
  },
  {
    "pw_code": "let home = env.get(\"HOME\")",
    "operation_id": "env.get",
    "context": "assignment"
  },
  {
    "pw_code": "let api_key = env.get(\"API_KEY\")",
    "operation_id": "env.get",
    "context": "assignment"
  },
  {
    "pw_code": "env.set(\"DEBUG\", \"true\")",
    "operation_id": "env.set",
    "context": "statement"
  },
  {
    "pw_code": "if env.get(\"ENV\") == \"production\"",
    "operation_id": "env.get",
    "context": "conditional"
  }
]