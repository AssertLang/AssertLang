# TA1 Dependencies

mission: "Standard Library & Syntax (Batch #11)"
branch: "feature/pw-standard-librarian"

# What TA1 depends on from other agents
depends_on:
  TA2:
    - component: "Async scheduler"
      reason: "Needed for async stdlib modules (fs, http)"
      status: "blocked"
      workaround: "Can test sync stdlib first"

    - component: "Execution model decision"
      reason: "Need to know VM vs transpiler for stdlib design"
      status: "critical"
      workaround: "None - must decide ASAP"

  TA3:
    - component: "LSP type info API"
      reason: "Stdlib needs to expose type metadata for autocomplete"
      status: "nice-to-have"
      workaround: "Can add later"

# What other agents are blocked on from TA1
blocks:
  TA2:
    - component: "stdlib core types"
      reason: "Runtime needs Option<T>, Result<T,E> definitions"
      eta: "Week 1"

  TA3:
    - component: "Syntax specification"
      reason: "LSP needs grammar for syntax highlighting"
      eta: "Week 1"

  TA4:
    - component: "stdlib modules"
      reason: "Can't publish packages without stdlib to import"
      eta: "Week 2"

  TA5:
    - component: "Type system"
      reason: "FFI needs type mappings (PW types â†’ Python/Go/Rust)"
      eta: "Week 1"

# Critical path items (if delayed, everything else delays)
critical_path:
  - "Bug Batch #11 syntax fixes" # Week 1
  - "Core module (Option, Result)" # Week 1
  - "Types module (List, Map)" # Week 1
  - "Execution model decision" # Week 1 (from TA2)

# Outputs TA1 will produce
outputs:
  code:
    - "stdlib/core.pw"
    - "stdlib/types.pw"
    - "stdlib/iter.pw"
    - "stdlib/fs.pw"
    - "stdlib/json.pw"

  tests:
    - "tests/test_enums.py"
    - "tests/test_stdlib_core.py"
    - "tests/test_stdlib_types.py"
    - "tests/test_stdlib_roundtrip.py"

  docs:
    - "docs/stdlib/README.md"
    - "docs/PW_SYNTAX_QUICK_REFERENCE.md"
    - "docs/PW_PROGRAMMING_GUIDE.md (updated)"

# Integration contracts with other TAs
contracts:
  with_TA2:
    runtime_api:
      - "schedule_task(fn: Function) -> TaskHandle"
      - "await_promise<T>(p: Promise<T>) -> T"
      - "get_capability(name: string) -> Capability"

  with_TA3:
    lsp_api:
      - "get_type_info(symbol: string) -> TypeInfo"
      - "get_stdlib_docs(module: string) -> string"

  with_TA5:
    ffi_types:
      - "Option<T> maps to Python Optional[T]"
      - "Result<T,E> maps to Rust Result<T,E>"
      - "List maps to native arrays in all langs"
