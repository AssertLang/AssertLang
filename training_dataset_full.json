[
  {
    "pw_code": "let content = file.read(\"data.txt\")",
    "operation_id": "file.read",
    "context": "assignment"
  },
  {
    "pw_code": "let config = file.read(\"/etc/config.json\")",
    "operation_id": "file.read",
    "context": "assignment"
  },
  {
    "pw_code": "if file.read(\"status.txt\").is_empty()",
    "operation_id": "file.read",
    "context": "conditional"
  },
  {
    "pw_code": "let lines = file.read(path).split(\"\\n\")",
    "operation_id": "file.read",
    "context": "chained"
  },
  {
    "pw_code": "for line in file.read(\"input.csv\").split(\"\\n\")",
    "operation_id": "file.read",
    "context": "loop"
  },
  {
    "pw_code": "return file.read(filepath)",
    "operation_id": "file.read",
    "context": "return"
  },
  {
    "pw_code": "file.write(\"output.txt\", result)",
    "operation_id": "file.write",
    "context": "statement"
  },
  {
    "pw_code": "file.write(path, json.stringify(data))",
    "operation_id": "file.write",
    "context": "chained"
  },
  {
    "pw_code": "file.write(\"log.txt\", timestamp + \": \" + message)",
    "operation_id": "file.write",
    "context": "concatenation"
  },
  {
    "pw_code": "if success { file.write(\"done.txt\", \"Complete\") }",
    "operation_id": "file.write",
    "context": "conditional"
  },
  {
    "pw_code": "file.write(output_path, content)",
    "operation_id": "file.write",
    "context": "variables"
  },
  {
    "pw_code": "if file.exists(\"config.json\")",
    "operation_id": "file.exists",
    "context": "conditional"
  },
  {
    "pw_code": "let has_file = file.exists(path)",
    "operation_id": "file.exists",
    "context": "assignment"
  },
  {
    "pw_code": "if not file.exists(\"data.txt\")",
    "operation_id": "file.exists",
    "context": "negation"
  },
  {
    "pw_code": "while not file.exists(lockfile)",
    "operation_id": "file.exists",
    "context": "loop"
  },
  {
    "pw_code": "return file.exists(filename)",
    "operation_id": "file.exists",
    "context": "return"
  },
  {
    "pw_code": "file.delete(\"temp.txt\")",
    "operation_id": "file.delete",
    "context": "statement"
  },
  {
    "pw_code": "if file.exists(path) { file.delete(path) }",
    "operation_id": "file.delete",
    "context": "conditional"
  },
  {
    "pw_code": "file.delete(tmpfile)",
    "operation_id": "file.delete",
    "context": "variable"
  },
  {
    "pw_code": "for f in old_files { file.delete(f) }",
    "operation_id": "file.delete",
    "context": "loop"
  },
  {
    "pw_code": "let files = file.list_dir(\".\")",
    "operation_id": "file.list_dir",
    "context": "assignment"
  },
  {
    "pw_code": "for file in file.list_dir(\"/tmp\")",
    "operation_id": "file.list_dir",
    "context": "loop"
  },
  {
    "pw_code": "let count = len(file.list_dir(directory))",
    "operation_id": "file.list_dir",
    "context": "chained"
  },
  {
    "pw_code": "if len(file.list_dir(path)) > 0",
    "operation_id": "file.list_dir",
    "context": "conditional"
  },
  {
    "pw_code": "file.mkdir(\"output\")",
    "operation_id": "file.mkdir",
    "context": "statement"
  },
  {
    "pw_code": "file.mkdir(output_dir)",
    "operation_id": "file.mkdir",
    "context": "variable"
  },
  {
    "pw_code": "if not file.exists(dir) { file.mkdir(dir) }",
    "operation_id": "file.mkdir",
    "context": "conditional"
  },
  {
    "pw_code": "file.copy(\"input.txt\", \"output.txt\")",
    "operation_id": "file.copy",
    "context": "statement"
  },
  {
    "pw_code": "file.copy(source, destination)",
    "operation_id": "file.copy",
    "context": "variables"
  },
  {
    "pw_code": "for src in sources { file.copy(src, dest) }",
    "operation_id": "file.copy",
    "context": "loop"
  },
  {
    "pw_code": "let parts = str.split(text, \",\")",
    "operation_id": "str.split",
    "context": "assignment"
  },
  {
    "pw_code": "let words = str.split(sentence, \" \")",
    "operation_id": "str.split",
    "context": "assignment"
  },
  {
    "pw_code": "for item in str.split(data, \",\")",
    "operation_id": "str.split",
    "context": "loop"
  },
  {
    "pw_code": "let count = len(str.split(csv_line, \",\"))",
    "operation_id": "str.split",
    "context": "chained"
  },
  {
    "pw_code": "if len(str.split(line, \"\\t\")) == 3",
    "operation_id": "str.split",
    "context": "conditional"
  },
  {
    "pw_code": "let upper = str.upper(text)",
    "operation_id": "str.upper",
    "context": "assignment"
  },
  {
    "pw_code": "let name_caps = str.upper(name)",
    "operation_id": "str.upper",
    "context": "assignment"
  },
  {
    "pw_code": "if str.upper(input) == \"YES\"",
    "operation_id": "str.upper",
    "context": "conditional"
  },
  {
    "pw_code": "return str.upper(result)",
    "operation_id": "str.upper",
    "context": "return"
  },
  {
    "pw_code": "print(str.upper(message))",
    "operation_id": "str.upper",
    "context": "function_call"
  },
  {
    "pw_code": "let lower = str.lower(text)",
    "operation_id": "str.lower",
    "context": "assignment"
  },
  {
    "pw_code": "if str.lower(answer) == \"yes\"",
    "operation_id": "str.lower",
    "context": "conditional"
  },
  {
    "pw_code": "let email = str.lower(user_email)",
    "operation_id": "str.lower",
    "context": "assignment"
  },
  {
    "pw_code": "let clean = str.trim(input)",
    "operation_id": "str.trim",
    "context": "assignment"
  },
  {
    "pw_code": "let username = str.trim(raw_input)",
    "operation_id": "str.trim",
    "context": "assignment"
  },
  {
    "pw_code": "if str.trim(line).is_empty()",
    "operation_id": "str.trim",
    "context": "conditional"
  },
  {
    "pw_code": "if \"error\" in log_line",
    "operation_id": "str.contains",
    "context": "conditional"
  },
  {
    "pw_code": "let has_pattern = \"@\" in email",
    "operation_id": "str.contains",
    "context": "assignment"
  },
  {
    "pw_code": "if \"WARNING\" in message",
    "operation_id": "str.contains",
    "context": "conditional"
  },
  {
    "pw_code": "if str.starts_with(filename, \"test_\")",
    "operation_id": "str.starts_with",
    "context": "conditional"
  },
  {
    "pw_code": "let is_comment = str.starts_with(line, \"#\")",
    "operation_id": "str.starts_with",
    "context": "assignment"
  },
  {
    "pw_code": "if str.starts_with(path, \"/\")",
    "operation_id": "str.starts_with",
    "context": "conditional"
  },
  {
    "pw_code": "let fixed = str.replace(text, \"old\", \"new\")",
    "operation_id": "str.replace",
    "context": "assignment"
  },
  {
    "pw_code": "let clean_path = str.replace(path, \"\\\\\", \"/\")",
    "operation_id": "str.replace",
    "context": "assignment"
  },
  {
    "pw_code": "return str.replace(content, search, replace)",
    "operation_id": "str.replace",
    "context": "return"
  },
  {
    "pw_code": "let data = json.parse(json_string)",
    "operation_id": "json.parse",
    "context": "assignment"
  },
  {
    "pw_code": "let config = json.parse(file.read(\"config.json\"))",
    "operation_id": "json.parse",
    "context": "chained"
  },
  {
    "pw_code": "let user = json.parse(response)",
    "operation_id": "json.parse",
    "context": "assignment"
  },
  {
    "pw_code": "for item in json.parse(json_text)",
    "operation_id": "json.parse",
    "context": "loop"
  },
  {
    "pw_code": "if json.parse(data)[\"status\"] == \"ok\"",
    "operation_id": "json.parse",
    "context": "conditional"
  },
  {
    "pw_code": "let json_str = json.stringify(data)",
    "operation_id": "json.stringify",
    "context": "assignment"
  },
  {
    "pw_code": "file.write(\"output.json\", json.stringify(result))",
    "operation_id": "json.stringify",
    "context": "chained"
  },
  {
    "pw_code": "return json.stringify(response)",
    "operation_id": "json.stringify",
    "context": "return"
  },
  {
    "pw_code": "print(json.stringify(user))",
    "operation_id": "json.stringify",
    "context": "function_call"
  },
  {
    "pw_code": "let response = http.get(\"https://api.example.com/data\")",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "let html = http.get(url)",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "let content = http.get(\"https://example.com\")",
    "operation_id": "http.get",
    "context": "assignment"
  },
  {
    "pw_code": "if \"200\" in http.get(health_url)",
    "operation_id": "http.get",
    "context": "conditional"
  },
  {
    "pw_code": "let data = http.get_json(\"https://api.example.com/users\")",
    "operation_id": "http.get_json",
    "context": "assignment"
  },
  {
    "pw_code": "let users = http.get_json(api_url)",
    "operation_id": "http.get_json",
    "context": "assignment"
  },
  {
    "pw_code": "for user in http.get_json(users_endpoint)",
    "operation_id": "http.get_json",
    "context": "loop"
  },
  {
    "pw_code": "let smaller = min(a, b)",
    "operation_id": "math.min",
    "context": "assignment"
  },
  {
    "pw_code": "let larger = max(x, y)",
    "operation_id": "math.max",
    "context": "assignment"
  },
  {
    "pw_code": "let result = min(count, limit)",
    "operation_id": "math.min",
    "context": "assignment"
  },
  {
    "pw_code": "let rounded = round(value)",
    "operation_id": "math.round",
    "context": "assignment"
  },
  {
    "pw_code": "let floored = floor(number)",
    "operation_id": "math.floor",
    "context": "assignment"
  },
  {
    "pw_code": "let ceiled = ceil(price)",
    "operation_id": "math.ceil",
    "context": "assignment"
  },
  {
    "pw_code": "let r = random()",
    "operation_id": "math.random",
    "context": "assignment"
  },
  {
    "pw_code": "let dice = random_int(1, 6)",
    "operation_id": "math.random_int",
    "context": "assignment"
  },
  {
    "pw_code": "if random() > 0.5",
    "operation_id": "math.random",
    "context": "conditional"
  },
  {
    "pw_code": "let count = len(items)",
    "operation_id": "array.len",
    "context": "assignment"
  },
  {
    "pw_code": "if len(array) > 0",
    "operation_id": "array.len",
    "context": "conditional"
  },
  {
    "pw_code": "for i in range(0, len(data))",
    "operation_id": "array.len",
    "context": "loop"
  },
  {
    "pw_code": "items.push(new_item)",
    "operation_id": "array.push",
    "context": "statement"
  },
  {
    "pw_code": "let last = items.pop()",
    "operation_id": "array.pop",
    "context": "assignment"
  },
  {
    "pw_code": "results.push(result)",
    "operation_id": "array.push",
    "context": "statement"
  },
  {
    "pw_code": "let timestamp = time.now()",
    "operation_id": "time.now",
    "context": "assignment"
  },
  {
    "pw_code": "let ms = time.now_ms()",
    "operation_id": "time.now_ms",
    "context": "assignment"
  },
  {
    "pw_code": "sleep(1)",
    "operation_id": "time.sleep",
    "context": "statement"
  },
  {
    "pw_code": "sleep_ms(500)",
    "operation_id": "time.sleep_ms",
    "context": "statement"
  },
  {
    "pw_code": "let home = env.get(\"HOME\")",
    "operation_id": "env.get",
    "context": "assignment"
  },
  {
    "pw_code": "let api_key = env.get(\"API_KEY\")",
    "operation_id": "env.get",
    "context": "assignment"
  },
  {
    "pw_code": "env.set(\"DEBUG\", \"true\")",
    "operation_id": "env.set",
    "context": "statement"
  },
  {
    "pw_code": "if env.get(\"ENV\") == \"production\"",
    "operation_id": "env.get",
    "context": "conditional"
  },
  {
    "pw_code": "file.append(\"log.txt\", message)",
    "operation_id": "file.append",
    "context": "statement"
  },
  {
    "pw_code": "file.append(logfile, timestamp + \": \" + event)",
    "operation_id": "file.append",
    "context": "concatenation"
  },
  {
    "pw_code": "file.append(\"errors.log\", error_msg)",
    "operation_id": "file.append",
    "context": "statement"
  },
  {
    "pw_code": "let lines = file.read_lines(\"data.txt\")",
    "operation_id": "file.read_lines",
    "context": "assignment"
  },
  {
    "pw_code": "for line in file.read_lines(filepath)",
    "operation_id": "file.read_lines",
    "context": "loop"
  },
  {
    "pw_code": "let count = len(file.read_lines(\"input.txt\"))",
    "operation_id": "file.read_lines",
    "context": "chained"
  },
  {
    "pw_code": "file.write_lines(\"output.txt\", lines)",
    "operation_id": "file.write_lines",
    "context": "statement"
  },
  {
    "pw_code": "file.write_lines(path, results)",
    "operation_id": "file.write_lines",
    "context": "variables"
  },
  {
    "pw_code": "file.rmdir(\"temp\")",
    "operation_id": "file.rmdir",
    "context": "statement"
  },
  {
    "pw_code": "file.rmdir(temp_dir)",
    "operation_id": "file.rmdir",
    "context": "variable"
  },
  {
    "pw_code": "let bytes = file.size(\"data.bin\")",
    "operation_id": "file.size",
    "context": "assignment"
  },
  {
    "pw_code": "if file.size(file) > 1000000",
    "operation_id": "file.size",
    "context": "conditional"
  },
  {
    "pw_code": "let size_mb = file.size(path) / 1024 / 1024",
    "operation_id": "file.size",
    "context": "math"
  },
  {
    "pw_code": "let length = str.len(text)",
    "operation_id": "str.len",
    "context": "assignment"
  },
  {
    "pw_code": "if str.len(password) < 8",
    "operation_id": "str.len",
    "context": "conditional"
  },
  {
    "pw_code": "let sub = text[0:10]",
    "operation_id": "str.substring",
    "context": "slice"
  },
  {
    "pw_code": "let first = name[0:1]",
    "operation_id": "str.substring",
    "context": "slice"
  },
  {
    "pw_code": "let rest = line[5:]",
    "operation_id": "str.substring",
    "context": "slice"
  },
  {
    "pw_code": "if str.ends_with(filename, \".txt\")",
    "operation_id": "str.ends_with",
    "context": "conditional"
  },
  {
    "pw_code": "let is_python = str.ends_with(file, \".py\")",
    "operation_id": "str.ends_with",
    "context": "assignment"
  },
  {
    "pw_code": "let csv = str.join(values, \",\")",
    "operation_id": "str.join",
    "context": "assignment"
  },
  {
    "pw_code": "let path = str.join(parts, \"/\")",
    "operation_id": "str.join",
    "context": "assignment"
  },
  {
    "pw_code": "let sentence = str.join(words, \" \")",
    "operation_id": "str.join",
    "context": "assignment"
  },
  {
    "pw_code": "let pos = str.index_of(text, \"pattern\")",
    "operation_id": "str.index_of",
    "context": "assignment"
  },
  {
    "pw_code": "if str.index_of(line, \"ERROR\") != -1",
    "operation_id": "str.index_of",
    "context": "conditional"
  },
  {
    "pw_code": "let reversed = str.reverse(text)",
    "operation_id": "str.reverse",
    "context": "assignment"
  },
  {
    "pw_code": "let palindrome_check = str.reverse(word)",
    "operation_id": "str.reverse",
    "context": "assignment"
  },
  {
    "pw_code": "if str.is_empty(input)",
    "operation_id": "str.is_empty",
    "context": "conditional"
  },
  {
    "pw_code": "if not str.is_empty(line)",
    "operation_id": "str.is_empty",
    "context": "negation"
  },
  {
    "pw_code": "let empty = str.is_empty(text)",
    "operation_id": "str.is_empty",
    "context": "assignment"
  },
  {
    "pw_code": "let response = http.post(url, body)",
    "operation_id": "http.post",
    "context": "assignment"
  },
  {
    "pw_code": "let result = http.post(\"https://api.example.com\", data)",
    "operation_id": "http.post",
    "context": "assignment"
  },
  {
    "pw_code": "let response = http.post_json(url, data)",
    "operation_id": "http.post_json",
    "context": "assignment"
  },
  {
    "pw_code": "let user = http.post_json(\"https://api.example.com/users\", user_data)",
    "operation_id": "http.post_json",
    "context": "assignment"
  },
  {
    "pw_code": "http.download(url, \"file.zip\")",
    "operation_id": "http.download",
    "context": "statement"
  },
  {
    "pw_code": "http.download(\"https://example.com/data.csv\", local_path)",
    "operation_id": "http.download",
    "context": "statement"
  },
  {
    "pw_code": "let encoded = url.encode(query)",
    "operation_id": "url.encode",
    "context": "assignment"
  },
  {
    "pw_code": "let safe_url = url.encode(user_input)",
    "operation_id": "url.encode",
    "context": "assignment"
  },
  {
    "pw_code": "let decoded = url.decode(encoded_str)",
    "operation_id": "url.decode",
    "context": "assignment"
  },
  {
    "pw_code": "let original = url.decode(param)",
    "operation_id": "url.decode",
    "context": "assignment"
  },
  {
    "pw_code": "let parts = url.parse(\"https://example.com/path?q=test\")",
    "operation_id": "url.parse",
    "context": "assignment"
  },
  {
    "pw_code": "let parsed = url.parse(full_url)",
    "operation_id": "url.parse",
    "context": "assignment"
  },
  {
    "pw_code": "if json.validate(text)",
    "operation_id": "json.validate",
    "context": "conditional"
  },
  {
    "pw_code": "let is_valid = json.validate(json_str)",
    "operation_id": "json.validate",
    "context": "assignment"
  },
  {
    "pw_code": "let pretty = json.stringify_pretty(data)",
    "operation_id": "json.stringify_pretty",
    "context": "assignment"
  },
  {
    "pw_code": "file.write(\"config.json\", json.stringify_pretty(config))",
    "operation_id": "json.stringify_pretty",
    "context": "chained"
  },
  {
    "pw_code": "let absolute = abs(number)",
    "operation_id": "math.abs",
    "context": "assignment"
  },
  {
    "pw_code": "let distance = abs(x - y)",
    "operation_id": "math.abs",
    "context": "math"
  },
  {
    "pw_code": "let squared = x ** 2",
    "operation_id": "math.pow",
    "context": "operator"
  },
  {
    "pw_code": "let cubed = base ** 3",
    "operation_id": "math.pow",
    "context": "operator"
  },
  {
    "pw_code": "let power = a ** b",
    "operation_id": "math.pow",
    "context": "operator"
  },
  {
    "pw_code": "let root = sqrt(number)",
    "operation_id": "math.sqrt",
    "context": "assignment"
  },
  {
    "pw_code": "let distance = sqrt(dx**2 + dy**2)",
    "operation_id": "math.sqrt",
    "context": "math"
  },
  {
    "pw_code": "let formatted = time.format(timestamp, \"%Y-%m-%d\")",
    "operation_id": "time.format",
    "context": "assignment"
  },
  {
    "pw_code": "let date_str = time.format(now, format)",
    "operation_id": "time.format",
    "context": "assignment"
  },
  {
    "pw_code": "let ts = time.parse(\"2024-01-01\", \"%Y-%m-%d\")",
    "operation_id": "time.parse",
    "context": "assignment"
  },
  {
    "pw_code": "let timestamp = time.parse(date_string, fmt)",
    "operation_id": "time.parse",
    "context": "assignment"
  },
  {
    "pw_code": "let iso = time.now_iso()",
    "operation_id": "time.now_iso",
    "context": "assignment"
  },
  {
    "pw_code": "let timestamp_str = time.now_iso()",
    "operation_id": "time.now_iso",
    "context": "assignment"
  },
  {
    "pw_code": "let future = time.add_days(now, 7)",
    "operation_id": "time.add_days",
    "context": "assignment"
  },
  {
    "pw_code": "let expiry = time.add_days(timestamp, days)",
    "operation_id": "time.add_days",
    "context": "assignment"
  },
  {
    "pw_code": "let output = process.run(\"ls -la\")",
    "operation_id": "process.run",
    "context": "assignment"
  },
  {
    "pw_code": "let result = process.run(command)",
    "operation_id": "process.run",
    "context": "assignment"
  },
  {
    "pw_code": "exit(0)",
    "operation_id": "process.exit",
    "context": "statement"
  },
  {
    "pw_code": "if error { exit(1) }",
    "operation_id": "process.exit",
    "context": "conditional"
  },
  {
    "pw_code": "let current_dir = process.cwd()",
    "operation_id": "process.cwd",
    "context": "assignment"
  },
  {
    "pw_code": "let wd = process.cwd()",
    "operation_id": "process.cwd",
    "context": "assignment"
  },
  {
    "pw_code": "process.chdir(\"/tmp\")",
    "operation_id": "process.chdir",
    "context": "statement"
  },
  {
    "pw_code": "process.chdir(new_directory)",
    "operation_id": "process.chdir",
    "context": "variable"
  },
  {
    "pw_code": "if item in array",
    "operation_id": "array.contains",
    "context": "conditional"
  },
  {
    "pw_code": "let found = \"test\" in items",
    "operation_id": "array.contains",
    "context": "assignment"
  },
  {
    "pw_code": "let index = arr.index_of(value)",
    "operation_id": "array.index_of",
    "context": "assignment"
  },
  {
    "pw_code": "if items.index_of(target) != -1",
    "operation_id": "array.index_of",
    "context": "conditional"
  },
  {
    "pw_code": "let sub = arr[0:5]",
    "operation_id": "array.slice",
    "context": "slice"
  },
  {
    "pw_code": "let first_ten = items[0:10]",
    "operation_id": "array.slice",
    "context": "slice"
  },
  {
    "pw_code": "let rest = data[1:]",
    "operation_id": "array.slice",
    "context": "slice"
  },
  {
    "pw_code": "let reversed = arr.reverse()",
    "operation_id": "array.reverse",
    "context": "assignment"
  },
  {
    "pw_code": "let backwards = items.reverse()",
    "operation_id": "array.reverse",
    "context": "assignment"
  },
  {
    "pw_code": "let sorted_arr = sorted(items)",
    "operation_id": "array.sort",
    "context": "assignment"
  },
  {
    "pw_code": "let ordered = sorted(numbers)",
    "operation_id": "array.sort",
    "context": "assignment"
  },
  {
    "pw_code": "let encoded = base64.encode(data)",
    "operation_id": "base64.encode",
    "context": "assignment"
  },
  {
    "pw_code": "let decoded = base64.decode(encoded_str)",
    "operation_id": "base64.decode",
    "context": "assignment"
  },
  {
    "pw_code": "let hex_str = hex.encode(bytes)",
    "operation_id": "hex.encode",
    "context": "assignment"
  },
  {
    "pw_code": "let bytes = hex.decode(hex_string)",
    "operation_id": "hex.decode",
    "context": "assignment"
  },
  {
    "pw_code": "let hash = hash.md5(data)",
    "operation_id": "hash.md5",
    "context": "assignment"
  },
  {
    "pw_code": "let checksum = hash.sha256(content)",
    "operation_id": "hash.sha256",
    "context": "assignment"
  },
  {
    "pw_code": "let hash = hash.sha256(file.read(path))",
    "operation_id": "hash.sha256",
    "context": "chained"
  },
  {
    "pw_code": "let text = str(number)",
    "operation_id": "type.str",
    "context": "assignment"
  },
  {
    "pw_code": "let msg = \"Count: \" + str(count)",
    "operation_id": "type.str",
    "context": "concatenation"
  },
  {
    "pw_code": "let number = int(text)",
    "operation_id": "type.int",
    "context": "assignment"
  },
  {
    "pw_code": "let count = int(user_input)",
    "operation_id": "type.int",
    "context": "assignment"
  },
  {
    "pw_code": "let decimal = float(string)",
    "operation_id": "type.float",
    "context": "assignment"
  },
  {
    "pw_code": "let price = float(price_str)",
    "operation_id": "type.float",
    "context": "assignment"
  },
  {
    "pw_code": "let flag = bool(value)",
    "operation_id": "type.bool",
    "context": "assignment"
  },
  {
    "pw_code": "let enabled = bool(config[\"enabled\"])",
    "operation_id": "type.bool",
    "context": "assignment"
  },
  {
    "pw_code": "if typeof(value) == \"string\"",
    "operation_id": "type.is_string",
    "context": "conditional"
  },
  {
    "pw_code": "if typeof(x) == \"int\"",
    "operation_id": "type.is_int",
    "context": "conditional"
  },
  {
    "pw_code": "if typeof(n) == \"float\"",
    "operation_id": "type.is_float",
    "context": "conditional"
  },
  {
    "pw_code": "if typeof(flag) == \"bool\"",
    "operation_id": "type.is_bool",
    "context": "conditional"
  }
]